{"version":3,"sources":["undraw_Data_points_re_vkpq.svg","logo.svg","undraw_data_processing_yrrv.svg","App.js","reportWebVitals.js","index.js"],"names":["FileDownload","require","App","useState","setCurrentTime","setMessage","selectedFile","setSelectedFile","isSelected","setIsSelected","useEffect","fetch","then","res","json","data","time","className","id","class","href","src","chart","alt","type","name","onChange","event","target","files","onClick","formData","FormData","append","method","body","response","blob","result","console","log","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6MAAe,GCAA,IDAA,IAA0B,wD,GEA1B,I,YCMTA,EAAeC,EAAQ,IAsHdC,MApHf,WAEE,MAAsCC,mBAAS,GAA/C,mBAAoBC,GAApB,WACA,EAA8BD,mBAAS,IAAvC,mBAAgBE,GAAhB,WACD,EAAwCF,qBAAxC,mBAAOG,EAAP,KAAqBC,EAArB,KACA,EAAoCJ,oBAAS,GAA7C,mBAAOK,EAAP,KAAmBC,EAAnB,KA6CC,OAJAC,qBAAU,WALRC,MAAM,SAASC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAAQF,MAAK,SAAAG,GAC1CX,EAAeW,EAAKC,WAMrB,IAGD,sBAAKC,UAAU,MAAf,UACA,sBAAKA,UAAU,WAAf,UACA,qBAAKC,GAAG,YAAR,iCACE,qBAAKA,GAAG,YAAR,SACI,qBAAIC,MAAM,UAAV,UACM,oBAAIA,MAAM,kBAAV,SAA4B,mBAAGC,KAAK,IAAR,oBAC5B,oBAAID,MAAM,sBAAV,SAAgC,mBAAGC,KAAK,IAAR,wBAChC,oBAAID,MAAM,sBAAV,SAAgC,mBAAGC,KAAK,IAAR,6BAK5C,qBAAKH,UAAU,kBAAf,SACE,qBAAKI,IAAKC,EAAOL,UAAU,QAAQM,IAAI,WAGzC,sBAAKN,UAAU,eAAf,UAII,sBAAKC,GAAG,mBAAR,UAEE,wDAA0B,uBAA1B,yBACA,oBAAGD,UAAU,cAAb,2DACgD,uBADhD,sDAMF,sBAAKA,UAAU,sBAAf,UACE,gEACA,uBAAOO,KAAK,OAAOC,KAAK,OAAOC,SA3ElB,SAACC,GACtBpB,EAAgBoB,EAAMC,OAAOC,MAAM,IACnCpB,GAAc,IAyEkDQ,UAAU,KACjET,EACC,wBAWA,sBAEF,qBAAKS,UAAU,aAAaa,QArFZ,WACxB,IAAMC,EAAW,IAAIC,SAEnB3B,EAAW,mDAEX0B,EAASE,OAAO,OAAQ3B,GAE1BK,MACC,wCACA,CACCuB,OAAQ,OACRC,KAAMJ,IAGNnB,MAAK,SAACwB,GAAD,OAAcA,EAASC,UAC5BzB,MAAK,SAAC0B,GACFtC,EAAasC,EAAQ,kBAEzBC,QAAQC,IAAI,WAAYF,MAExBG,OAAM,SAACC,GACPH,QAAQG,MAAM,SAAUA,OAgElB,SACE,qBAAKzB,UAAU,gBAAf,oCC9FG0B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjC,MAAK,YAAkD,IAA/CkC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.49be466c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/undraw_Data_points_re_vkpq.7f5d03c3.svg\";","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export default __webpack_public_path__ + \"static/media/undraw_data_processing_yrrv.f1a92978.svg\";","import React, { useState, useEffect } from 'react';\r\n// eslint-disable-next-line\r\nimport logo from './logo.svg';\r\nimport chart from './undraw_Data_points_re_vkpq.svg'\r\nimport graphic1 from './undraw_data_processing_yrrv.svg'\r\nimport './App.css';\r\nconst FileDownload = require('js-file-download');\r\n\r\nfunction App() {\r\n\r\n  const [currentTime, setCurrentTime] = useState(0);\r\n  const [message, setMessage] = useState(\"\");\r\n\tconst [selectedFile, setSelectedFile] = useState();\r\n\tconst [isSelected, setIsSelected] = useState(false);\r\n\r\n\tconst changeHandler = (event) => {\r\n\t\tsetSelectedFile(event.target.files[0]);\r\n\t\tsetIsSelected(true);\r\n\t};\r\n\r\n\tconst handleSubmission = () => {\r\n\t\tconst formData = new FormData();\r\n\r\n    setMessage(\"Your report is being generated, Please Wait....\");\r\n\r\n    formData.append('file', selectedFile);\r\n\r\n\t\tfetch(\r\n\t\t\t'http://127.0.0.1:5000/generate_report',\r\n\t\t\t{\r\n\t\t\t\tmethod: 'POST',\r\n\t\t\t\tbody: formData,\r\n\t\t\t}\r\n\t\t)\r\n\t\t\t.then((response) => response.blob())\r\n\t\t\t.then((result) => {\r\n        FileDownload(result, \"my_report.html\");\r\n        // FileDownload(response.data, 'report.csv');\r\n\t\t\t\tconsole.log('Success:', result);\r\n\t\t\t})\r\n\t\t\t.catch((error) => {\r\n\t\t\t\tconsole.error('Error:', error);\r\n\t\t\t});\r\n    // setMessage(\"Done Thanks for using Insight Generator\");\r\n\t};\r\n\t\r\n\r\n\r\n  const getTime = () =>{\r\n    fetch('/time').then(res => res.json()).then(data => {\r\n      setCurrentTime(data.time);\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n    getTime();\r\n  }, [])\r\n\r\n  return (\r\n    <div className=\"App\">\r\n    <div className=\"Menu-bar\">\r\n    <div id=\"home-name\" > Insight-Generator </div>\r\n      <nav id=\"main-menu\">\r\n          <ul class=\"nav-bar\">\r\n                <li class=\"nav-button-home\"><a href=\"#\">Home</a></li>\r\n                <li class=\"nav-button-services\"><a href=\"#\">Services</a></li>\r\n                <li class=\"nav-button-products\"><a href=\"#\">About</a></li>\r\n          </ul>\r\n      </nav>    \r\n    </div>\r\n    \r\n    <div className=\"Chart-container\">\r\n      <img src={chart} className=\"Chart\" alt=\"logo\" />\r\n    </div>\r\n   \r\n    <div className=\"Main-content\">\r\n        {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\r\n        {/* <p> Current Time is {currentTime} </p> */}\r\n        \r\n        <div id=\"Description-text\">\r\n          {/* <p>WORLDS BEST ANALYTICS TOOL</p> */}\r\n          <h3> Understand Your Data <br/> Like Never Before </h3>\r\n          <p className=\"Description\">\r\n            Insight-Generator is world's first patform to <br/> get Insights of any csv file withim seconds.   \r\n          </p>\r\n        </div>\r\n\r\n\r\n        <div className=\"Converter-container\">\r\n          <p> Attach Your CSV File Here ... </p>\r\n          <input type=\"file\" name=\"file\" onChange={changeHandler} className=\"\" />\r\n          {isSelected ? (\r\n            <div>\r\n              {/* <p>Filename: {selectedFile.name}</p>\r\n              <p>Filetype: {selectedFile.type}</p>\r\n              <p>Size in bytes: {selectedFile.size}</p>\r\n              <p>\r\n                lastModifiedDate:{' '}\r\n                {selectedFile.lastModifiedDate.toLocaleDateString()}\r\n              </p> */}\r\n            </div>\r\n          ) : (\r\n            // <p>Select a file to show details</p>\r\n            <p></p>\r\n          )}\r\n          <div className=\"Div-button\" onClick={handleSubmission}>\r\n            <div className=\"Button-center\" >Get Report</div>\r\n          </div>\r\n          {/* <div> \r\n            <div>{message}</div>\r\n          </div> */}\r\n      </div>\r\n      {/* <br/>\r\n      <br/>\r\n      <div>\r\n          <img src={graphic1} className=\"Graphic1\" alt=\"logo\" />\r\n      </div> */}\r\n\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}